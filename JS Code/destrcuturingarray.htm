<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Destructuring Arrays</title>
</head>
<body>
    <!-- Destructuring arrays: unpacking values of an array or an object into separate variables -->
    <script>
        "use strict"; 
        const restaurant = {
            name: 'Classico Italiano',
            location: 'Via Angelo Tavanti 23, Firenze, Italy',
            categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'], 
            starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'], 
            mainMenu: ['Pizza', 'Pasta', 'Risotto'],
            openingHours: {
                thu:{
                    open: 12,
                    close: 22,
                },
                fri: {
                    open: 11, 
                    close: 23,
                },
                sat: {
                    open: 10,
                    close: 24,
                },
            },

            order: function(starterIndex, mainIndex){
                return[this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
            },
            orderDelivery: function({
                starterIndex=1, 
                mainIndex =0,
                time = '20:00', 
                address,
            }) {
                console.log(
                    `Order received ${this.starterMenu[starterIndex]} and ${this.mainMenu[mainIndex]} and will be delivered to ${address} and ${time}`
                    );
            },
            
            orderPasta: function(ing1, ing2, ing3){
                console.log(`Here is your delicious pasta with ${ing1} and ${ing2} and ${ing3}`);
            },

            orderPizza: function(mainIngredient, ...otherIngredients){
                console.log(mainIngredient);
                console.log(otherIngredients);
            },
        };

        restaurant.numGuests = 0;
        const guests = restaurant.numGuests || 10; 
        console.log(guests);

        // NULLISH COALESCING : NULL AND UNDEFINED (NOT 0 AND " "). BASICALLY 0 AND " " ARE NOT CONSIDERED FALSY VALUES IN THIS CASE 
        const guestCorrect = restaurant.numGuests ?? 10;
        console.log(guestCorrect);







        ////////////////////////      SHORT CIRCUITING     //////////////////////////////
        // LOGICAL OPERATORS: THEY USE ANY DATA TYPE, RETURN ANY DATA TYPE, SHORT-CIRCUITING

        // SHORT CIRCUITING: IF THE FIRST VALUE IS A TRUTHY VALUE, THEN THE FIRST VALUE WILL BE RETURNED  (JS WILL NOT EVEN EVALUATE THE FIRST VALUE)

        // FALSY VALUES : undefined, null, NaN, 0, "", false (6 falsy values)

        // console.log("--------- OR -------");

        // console.log(3 || 'Jonas');
        // console.log('' || 'Jonas');
        // console.log(true || 0);
        // console.log(undefined || null);

        // // TENARY OPERTAOR 
        // restaurant.numGuests = 23;
        // const guest1 = restaurant.numGuests ? restaurant.numGuests : 10; 
        // console.log(guest1);

        // // SHORTER VERSION OF THE CODE ABOVE
        // const guest2 = restaurant.numGuests || 10;
        // console.log(guest2);

        // console.log("--------- AND -------");
        // /// COMPLETE OPPOSITE OF OR 
        // console.log( 0 && 'Jonas');
        // console.log(7 && 'Jonas');

        // // EXAMPLE
        // if (restaurant.orderPizza){
        //     restaurant.orderPizza("mushrooms", "spinach");
        // }

        // restaurant.orderPizza && restaurant.orderPizza('mushroom', 'spinach');

























        //////////////////////////////    REST PATTERN AND PARAMETERS ///////////////
        //// DESTRUCTURING 

        // SPREAD, because on RIGHT side of =
        // const arr = [1,2, ...[3,4]];

        // // REST, bc on LEFT side of =
        // const [a,b, ...others] = [1,2,3,4,5];
        // console.log(a,b, others);

        // const [pizza, , risotto, ...otherFood] = [...restaurant.mainMenu, ...restaurant.starterMenu,];
        // console.log(pizza, risotto, otherFood);

        // // OBJECTS 
        // const { sat, ...weekdays } = restaurant.openingHours; 
        // console.log(weekdays);

        // /// FUNCTIONS  
        // const add = function(...numbers){
        //     let sum = 0;
        //     for (let i=0; i<numbers.length; i++){
        //         sum += numbers[i];
        //     }
        //     console.log(sum);
        // }
        // add(2, 3);
        // add(5,3,7,2);
        // add(5, 5, 2,2)

        // const x = [23,5, 7];
        // add(...x);

        // restaurant.orderPizza('mushrooms', 'onion', 'olives', 'spinach');
        // restaurant.orderPizza('mushrooms');

        // // THE REST PATTERN CAN BE USED WHERE WE WOULD WRITE VARIABLE NAMES SEPARATED  BY COMMAS 
        // // THE SPREAD OPERATOR IS USED WHERE WE WOULD WRITE VALUES SEPARATED BY COMMAS 





















    ////////////////////////////////////// DESTRUCTURING OBJECTS    //////////////////////////

        // restaurant.orderDelivery({
        //     time: '22:30',
        //     address: 'Via del Sole, 21',
        //     mainIndex: 2,
        //     starterIndex: 2,
        // });

        // FOR DESTRUCTURING OBJECTS 
    //     const {name, openingHours, categories} = restaurant;
    //     console.log(name, openingHours, categories);

    //     // TO GIVE THEM INDIVIDUAL VARIABLES  
    //     const {name: restaurantName, openingHours: hours, categories: tags} = restaurant;
    //     console.log(restaurantName, hours, categories);
        
    //     // DEFAULT VALUES
    //     const {menu = [], starterMenu: starters = []} = restaurant;
    //     console.log(menu, starters );
        
    //     // MUTATING VARIABLES
    //     let a = 111;
    //     let b = 999;
    //     const obj = {a: 23, b: 7, c: 14};

    //     ({a, b} = obj);
    //     console.log(a);
    //     console.log(b);
        
    //     // NESTED OBJECTS 
    //     const {fri: {open, close}} = openingHours ;
    //     console.log(open, close);






















    //////////////     SPREAD OPERATOR       ///////////////////////////////////////////
        
    //     // THE SPREAD OPERATOR 
    //     const arr = [7, 8, 9]; 
    //     const badNewArr = [1, 2, arr[0], arr[1], arr[2]];
    //     console.log(badNewArr);

    //     const newArr = [1, 2, ...arr];
    //     console.log(newArr);
        
    //     console.log(...newArr);

    //     const newMenu = [...restaurant.mainMenu, 'Gnocci'];
    //     console.log(newMenu);

    //     // COPY ARRAY  
    //     const mainMenuCopy = [...restaurant.mainMenu];

    //     // JOIN TWO OR MORE ARRAYS TOGETHER 
    //     const menui = [...restaurant.mainMenu, ...restaurant.starterMenu];
    //     console.log(menui);

    //     // ITERABLES == THINGS ARRAYS, STRINGS, MAPS , SET BUT NOT OBJECTS 
    //     const str = 'Jonas';
    //     const letters = [...str, ' ', 'S.'];
    //     console.log(letters);

    // //     const ingredients = [
    // //         prompt("Lets make pasta! ingredient 1???"),
    // //         prompt('Lets make pasta! ingredient 2???'),
    // //         prompt("Lets make pasta! ingredient 3???"),
    // // ]; 
    // // console.log(...ingredients);

    // // OBJECTS 
    // const newRestaurant = {foundedIn: 1998, ...restaurant, founder:'Gui'};
    // console.log(newRestaurant);

    // const restaurantCopy = {...restaurant};
    // restaurantCopy.name='Roma';
    // console.log(restaurantCopy.name);
    // console.log(restaurant.name);


        
        

        
        


        












        

        
        

        
        //////////////////////////////////     ARRAY DESTRUCTURING        /////////////////////
        // const arr= [2, 3,4 ];
        // const a = arr[0];
        // const b = arr[1];
        // const c = arr[2];

        // // destructuring array 
        // const [x, y, z] = arr;
        // console.log(x, y,z );

        // let [first, ,second] = restaurant.categories;
        // console.log(first, second);

        // // SWITCHING VARIABLES
        // const temp = first;
        // first = second; 
        // second = temp; 
        // console.log(first, second);

        // [first, second]= [second, first];

        // // RECEIVE TWO RETURN VALUES FROM A FUNCTION
        // const [starter, main]=restaurant.order(2,0);
        // console.log(starter, main);

        // // NESTED DESTRUCTURING
        // const nested = [2,4, [5,6]];
        // // const [i, ,j] = nested; 
        // // console.log(i,j); 
        // const [i,,[j,k]] = nested;
        // console.log(i, j, k);

        // // DEFAULT VALUES 
        // const[p, q, r] = [8,9 ];
        // console.log(p, q, r);

    </script>
</body>
</html>